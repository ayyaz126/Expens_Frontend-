import { useState, useEffect, useCallback } from "react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import { Menu, X } from "lucide-react";
import LogoImage from "../assets/Logo.png";
import { useAuthStore } from "../store/auth.store";
import toast from "react-hot-toast";

export default function Navbar() {
  const [isOpen, setIsOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const { user, logout } = useAuthStore();
  const navigate = useNavigate();
  const location = useLocation();

  // Close mobile menu on route change
  useEffect(() => {
    setIsOpen(false);
  }, [location.pathname]);

  // Scroll effect (cleaner version)
  const handleScroll = useCallback(() => {
    setScrolled(window.scrollY > 20);
  }, []);

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [handleScroll]);

  const handleLogout = () => {
    logout();
    toast.success("Logged out successfully");
    navigate("/login");
  };

  const navBackground = scrolled
    ? "bg-white/95 backdrop-blur-md shadow-md text-gray-900"
    : "bg-transparent text-white";

  const linkClass = (path: string) =>
    `px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
      location.pathname === path
        ? scrolled
          ? "text-indigo-600 font-semibold"
          : "text-indigo-300 font-semibold"
        : scrolled
        ? "text-gray-700 hover:text-indigo-600"
        : "text-white hover:text-indigo-300"
    }`;

  const renderLinks = () => {
    const baseLinks = [
      { path: "/", label: "Home" },
      ...(user
        ? [
            { path: "/expenses", label: "Expenses" },
            { path: "/expenses/new", label: "Add" },
            { path: "/categories", label: "Categories" },
            ...(user.role === "admin"
              ? [{ path: "/admin/categories", label: "Admin" }]
              : []),
          ]
        : [
            { path: "/login", label: "Login" },
            { path: "/register", label: "Register" },
          ]),
    ];

    return baseLinks.map((link) => (
      <Link
        key={link.path}
        to={link.path}
        className={linkClass(link.path)}
      >
        {link.label}
      </Link>
    ));
  };

  return (
    <nav className={`fixed w-full z-50 transition-all duration-500 ${navBackground}`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <Link to="/" className="flex items-center group">
            <img
              src={LogoImage}
              alt="Expense Tracker Logo"
              className={`h-10 w-10 rounded-full transition-all duration-300 group-hover:rotate-12 ${
                scrolled ? "border-2 border-indigo-100" : "border-2 border-white/30"
              }`}
            />
            <span
              className={`ml-3 font-extrabold text-2xl tracking-wide transition-all duration-300 ${
                scrolled
                  ? "bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent"
                  : "text-white"
              }`}
            >
              Expense Tracker
            </span>
          </Link>

          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-2">
            {renderLinks()}
            {user && (
              <button
                onClick={handleLogout}
                className={`px-4 py-2 rounded-lg font-medium transition-all duration-300 ${
                  scrolled
                    ? "text-red-600 hover:bg-gray-100"
                    : "text-red-300 hover:bg-white/10"
                }`}
              >
                Logout
              </button>
            )}
          </div>

          {/* Mobile Toggle */}
          <div className="md:hidden flex items-center">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className={`p-2 rounded-md transition-all duration-300 ${
                scrolled
                  ? "text-gray-700 hover:bg-gray-100"
                  : "text-white hover:bg-white/10"
              }`}
              aria-label="Toggle menu"
            >
              {isOpen ? <X className="w-7 h-7" /> : <Menu className="w-7 h-7" />}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      <div
        className={`md:hidden transition-all duration-300 ease-in-out overflow-hidden ${
          isOpen ? "max-h-screen bg-white shadow-lg" : "max-h-0"
        }`}
      >
        <div className="px-4 pt-2 pb-4 space-y-2">
          {renderLinks()}
          {user && (
            <button
              onClick={handleLogout}
              className="w-full text-left px-4 py-3 rounded-lg font-medium text-red-600 hover:bg-gray-100"
            >
              Logout
            </button>
          )}
        </div>
      </div>
    </nav>
  );
}


navbar code 