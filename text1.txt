import { useEffect, useState } from "react";
import api from "../service/adminApi";
import { useAdminCategoryStore } from "../store/adminCatagory.store";
import toast from "react-hot-toast";
import { Plus, Edit, Save, XCircle, Trash2, LayoutGrid } from "lucide-react";

export default function AdminCategory() {
  const { categories, setCategories } = useAdminCategoryStore();
  const [newCategory, setNewCategory] = useState("");
  const [editingId, setEditingId] = useState<number | null>(null);
  const [editedName, setEditedName] = useState("");
  const [loadingAction, setLoadingAction] = useState<boolean>(false);

  const fetchCategories = async () => {
    try {
      const res = await api.get("/");
      setCategories(res.data.categories);
    } catch (err) {
      toast.error("Failed to fetch categories.");
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  const handleCreate = async () => {
    if (!newCategory.trim()) {
      toast.error("Name is required");
      return;
    }
    setLoadingAction(true);
    try {
      await api.post("/", { name: newCategory });
      toast.success("Category created");
      setNewCategory("");
      fetchCategories();
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Failed to create");
    } finally {
      setLoadingAction(false);
    }
  };

  const handleUpdate = async () => {
    if (!editedName.trim() || editingId === null) {
      toast.error("Name is required");
      return;
    }
    setLoadingAction(true);
    try {
      await api.put(`/${editingId}`, { name: editedName });
      toast.success("Category updated");
      setEditingId(null);
      setEditedName("");
      fetchCategories();

    }
     catch (err) {
      toast.error("Update failed");
    } finally {
      setLoadingAction(false);
    }
  };

  const handleDelete = async (id: number) => {
    if (!window.confirm("Are you sure you want to delete this category?")) {
      return;
    }
    setLoadingAction(true);
    try {
      await api.delete(`/${id}`);
      toast.success("Deleted");
      fetchCategories();
    } catch (err) {
      toast.error("Delete failed");
    } finally {
      setLoadingAction(false);
    }
  };

  return (
    <div className="bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 p-6 md:p-8 lg:p-10 font-inter">
      <div className="max-w-6xl mx-auto bg-white dark:bg-gray-900 rounded-2xl shadow-2xl overflow-hidden border border-gray-100 dark:border-gray-700">
        <div className="bg-gradient-to-br from-indigo-700 to-purple-800 px-6 py-8 md:px-8 md:py-10 relative overflow-hidden">
          <div
            className="absolute inset-0 opacity-10"
            style={{
              backgroundImage:
                "url('https://www.transparenttextures.com/patterns/cubes.png')",
            }}
          ></div>
          <div className="relative z-10 flex flex-col items-center justify-center">
            <LayoutGrid className="w-12 h-12 text-indigo-200 mb-3 drop-shadow-md" />
            <h1 className="text-3xl md:text-4xl font-bold text-white text-center drop-shadow-lg">
              Categories Management
            </h1>
            <p className="text-indigo-100 text-center mt-2 text-lg drop-shadow-sm">
              Create, edit and manage your expense categories with ease.
            </p>
          </div>
        </div>

        <div className="p-6 md:p-8 lg:p-10">
          <div className="bg-indigo-50/80 dark:bg-indigo-900/80 backdrop-blur-sm p-6 rounded-xl shadow-lg mb-10 border border-indigo-200 dark:border-indigo-700">
            <h2 className="text-xl font-semibold text-indigo-800 dark:text-indigo-200 mb-4 border-b border-indigo-300 dark:border-indigo-500 pb-2">
              Add New Category
            </h2>
            <div className="flex flex-col sm:flex-row gap-4">
              <input
                type="text"
                value={newCategory}
                onChange={(e) => setNewCategory(e.target.value)}
                placeholder="Enter category name"
                className="flex-1 px-5 py-3 border border-indigo-300 dark:border-indigo-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-500 text-base placeholder-indigo-400/70 dark:placeholder-indigo-300/70 transition-all duration-200 bg-white/90 dark:bg-gray-900 text-gray-900 dark:text-white shadow-inner"
              />
              <button
                onClick={handleCreate}
                disabled={loadingAction}
                className="w-full sm:w-auto bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white px-8 py-3 rounded-xl font-semibold text-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-300 disabled:opacity-70 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loadingAction ? (
                  <>
                    <svg
                      className="animate-spin h-5 w-5 text-white"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Adding...
                  </>
                ) : (
                  <>
                    <Plus className="w-5 h-5" />
                    Add Category
                  </>
                )}
              </button>
            </div>
          </div>

          <div className="bg-white dark:bg-gray-900 rounded-xl shadow-sm overflow-hidden border border-gray-200 dark:border-gray-700">
            <div className="bg-gray-50 dark:bg-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-600">
              <h3 className="text-xl font-semibold text-gray-800 dark:text-white">
                Existing Categories
              </h3>
            </div>

            {categories.length === 0 ? (
              <div className="p-8 text-center text-gray-500 dark:text-gray-400 text-lg">
                <p className="mb-2">No categories found.</p>
                <p>Start by adding one above!</p>
              </div>
            ) : (
              <ul className="divide-y divide-gray-200 dark:divide-gray-700">
                {categories.map((cat) => (
                  <li
                    key={cat.id}
                    className="hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors duration-150"
                  >
                    <div className="px-6 py-5">
                      {editingId === cat.id ? (
                        <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
                          <input
                            type="text"
                            value={editedName}
                            onChange={(e) => setEditedName(e.target.value)}
                            className="flex-1 px-4 py-2.5 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-blue-500 text-base bg-white dark:bg-gray-900 text-gray-900 dark:text-white shadow-inner"
                          />
                          <div className="flex gap-3 w-full sm:w-auto">
                            <button
                              onClick={handleUpdate}
                              disabled={loadingAction}
                              className="flex-1 sm:flex-none bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-5 py-2.5 rounded-lg font-medium shadow-sm hover:shadow-md transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed"
                            >
                              <Save className="w-4 h-4" />
                              Save
                            </button>
                            <button
                              onClick={() => setEditingId(null)}
                              disabled={loadingAction}
                              className="flex-1 sm:flex-none bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 text-gray-800 dark:text-white px-5 py-2.5 rounded-lg font-medium shadow-sm hover:shadow-md transition-colors duration-200 flex items-center justify-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed"
                            >
                              <XCircle className="w-4 h-4" />
                              Cancel
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                          <span className="text-lg font-medium text-gray-800 dark:text-white">
                            {cat.name}
                          </span>
                          <div className="flex gap-3 w-full sm:w-auto">
                            <button
                              onClick={() => {
                                setEditingId(cat.id);
                                setEditedName(cat.name);
                              }}
                              className="flex-1 sm:flex-none bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-5 py-2.5 rounded-lg font-medium shadow-sm hover:shadow-md transition-all duration-200 flex items-center justify-center gap-2"
                            >
                              <Edit className="w-4 h-4" />
                              Edit
                            </button>
                            <button
                              onClick={() => handleDelete(cat.id)}
                              disabled={loadingAction}
                              className="flex-1 sm:flex-none bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-5 py-2.5 rounded-lg font-medium shadow-sm hover:shadow-md transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-70 disabled:cursor-not-allowed"
                            >
                              <Trash2 className="w-4 h-4" />
                              Delete
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
